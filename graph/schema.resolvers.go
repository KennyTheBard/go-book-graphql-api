package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"time"

	"github.com/KennyTheBard/go-books-graphql-api/db"
	"github.com/KennyTheBard/go-books-graphql-api/graph/model"
	"github.com/KennyTheBard/go-books-graphql-api/utils"
)

// CreateBook is the resolver for the createBook field.
func (r *mutationResolver) CreateBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	publishDate, err := time.Parse(utils.JavascriptDateTimeFormat, input.PublishDate)
	if err != nil {
		return nil, err
	}

	var author db.Author
	if err = r.DB.First(&author, input.AuthorID).Error; err != nil {
		return nil, err
	}

	book := &db.Book{
		Title:       input.Title,
		AuthorID:    input.AuthorID,
		PublishDate: publishDate,
	}
	if err = r.DB.Create(book).Error; err != nil {
		return nil, err
	}

	return &model.Book{
		ID:    book.ID,
		Title: book.Title,
		Author: &model.Author{
			ID:          author.ID,
			Name:        author.Name,
			DateOfBirth: author.DateOfBirth.Format(utils.JavascriptDateTimeFormat),
		},
		PublishDate: book.PublishDate.Format(utils.JavascriptDateTimeFormat),
	}, nil
}

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input model.NewAuthor) (*model.Author, error) {
	dateOfBirth, err := time.Parse(utils.JavascriptDateTimeFormat, input.DateOfBirth)
	if err != nil {
		return nil, err
	}

	author := &db.Author{
		Name:        input.Name,
		DateOfBirth: dateOfBirth,
	}
	if err = r.DB.Create(author).Error; err != nil {
		return nil, err
	}

	return &model.Author{
		ID:          author.ID,
		Name:        author.Name,
		DateOfBirth: author.DateOfBirth.Format(utils.JavascriptDateTimeFormat),
	}, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	panic(fmt.Errorf("not implemented: Books - books"))
}

// BookByID is the resolver for the bookById field.
func (r *queryResolver) BookByID(ctx context.Context, id int) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: BookByID - bookById"))
}

// Authors is the resolver for the authors field.
func (r *queryResolver) Authors(ctx context.Context) ([]*model.Author, error) {
	var authors []db.Author
	if err := r.DB.Find(&authors).Error; err != nil {
		return nil, err
	}

	authorModels := make([]*model.Author, len(authors))
	for i, author := range authors {
		authorModels[i] = &model.Author{
			ID:          author.ID,
			Name:        author.Name,
			DateOfBirth: author.DateOfBirth.Format(utils.JavascriptDateTimeFormat),
		}
	}
	return authorModels, nil
}

// AuthorByID is the resolver for the authorById field.
func (r *queryResolver) AuthorByID(ctx context.Context, id int) (*model.Author, error) {
	var author db.Author
	if err := r.DB.First(&author, id).Error; err != nil {
		return nil, err
	}

	return &model.Author{
		ID:          author.ID,
		Name:        author.Name,
		DateOfBirth: author.DateOfBirth.Format(utils.JavascriptDateTimeFormat),
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
